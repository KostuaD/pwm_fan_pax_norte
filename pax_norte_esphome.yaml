substitutions:
  room_name: "TEST"
  device_name: h-esp-pax-fan
  version: "25.7.25.2"

  # User-adjustable parameters
  i2c_sda: GPIO17
  i2c_scl: GPIO04
  fan_pwm_pin: GPIO22
  red_led_pin: GPIO18
  green_led_pin: GPIO19
  blue_led_pin: GPIO21
  fan_rpm_pin: GPIO16
  illuminance_adc_pin: GPIO34

  fan_pwm_freq: "25kHz"
  fan_mode_manual_time: "10min"
  fan_mode_burst_time: "10min"
  humidity_on_default: "65.0"
  humidity_off_default: "60.0"
  debounce_time_ms: "10000" # Debounce interval for humidity-triggered speed change

esphome:
  name: ${device_name}
  on_boot: 
    priority: 70
    then:
      # Set fan mode to Auto and load humidity thresholds on boot
      - select.set:
         id: fan_mode_select
         option: "Auto"
      - lambda: |-
          id(humidity_threshold_on) = id(humidity_threshold_on_raw).state;
          id(humidity_threshold_off) = id(humidity_threshold_off_raw).state;
          ESP_LOGI("main", "Thresholds loaded at boot. ON: %.1f, OFF: %.1f", id(humidity_threshold_on), id(humidity_threshold_off));
  comment: PAX-ESPhome Ventilator
  platformio_options:
    build_flags:
      - "-D CONFIG_ADC_SUPPRESS_DEPRECATE_WARN=1" 

# --- Core Components ---
esp32:
  board: esp32dev
  framework:
    type: esp-idf

web_server:
  port: 80
  version: 3
  local: True

api:
  encryption:
    key: !secret encryption_key

ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: ${device_name}.local
  ap:
    ssid: "$device_name"
    password: !secret ssid_password

logger:
  level: DEBUG

preferences:
  flash_write_interval: 15min

captive_portal:

# --- Time and Scheduled Actions ---
time:
  - platform: sntp
    id: sntp_time
    timezone: Europe/Kyiv
    servers:
     - 0.pool.ntp.org
     - 1.pool.ntp.org
     - 2.pool.ntp.org
    # Quiet mode start time
    on_time: 
      - seconds: 0
        minutes: 0
        hours: 0
        then:
          - logger.log: { format: "Night time (00:00). Entering quiet 'Duty' mode.", level: INFO }
          - select.set:
              id: fan_mode_select
              option: "Duty"
          - light.turn_on: { id: rgb_led, red: 1.0, green: 1.0, blue: 1.0, brightness: 1.0, effect: "Slow Pulse" }
    # Quiet mode end time
      - seconds: 0
        minutes: 0
        hours: 7
        then:
          - logger.log: { format: "Day time (07:00). Reverting to 'Auto' mode.", level: INFO }
          - select.set:
              id: fan_mode_select
              option: "Auto"

# --- Global Variables for State Tracking ---
globals:
  - id: humidity_threshold_on
    type: float
    restore_value: yes
    initial_value: '0'
  - id: humidity_threshold_off
    type: float
    restore_value: yes
    initial_value: '0'
  - id: is_in_high_speed_auto_mode
    type: bool
    restore_value: no
    initial_value: 'false'
  - id: debounce_humidity_timer
    type: int
    restore_value: no
    initial_value: '0'
  - id: debounce_humidity_interval
    type: unsigned long
    restore_value: no
    initial_value: '${debounce_time_ms}'

# --- Hardware Interface ---
i2c:
  sda: ${i2c_sda}
  scl: ${i2c_scl}
  frequency: 400kHz 

# --- Sensors ---
text_sensor:
  - platform: wifi_info
    ip_address:
      name: IP Address
  - platform: template
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start
  - platform: template
    name: "Current Time"
    id: current_time_text
    icon: mdi:clock-outline
    lambda: |-
      auto time = id(sntp_time).now();
      return time.strftime("%H:%M");
    update_interval: 60s
    internal: true

sensor:
  - platform: sht4x
    temperature:
      name: "${room_name} Temperature"
    humidity:
      name: "${room_name} Humidity"
      id: humidity_sensor
      # On humidity change, execute debounce-aware script
      on_value:
        - script.execute: debounce_humidity_update
    update_interval: 30s

  - platform: adc
    pin: ${illuminance_adc_pin}
    name: "${room_name} Illuminance"
    device_class: illuminance
    unit_of_measurement: lx
    update_interval: 30s
    filters:
      - multiply: 300

  - platform: pulse_meter
    pin: 
      number: ${fan_rpm_pin}
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: fan_speed
    name: "Fan Speed"
    icon: mdi:engine
    accuracy_decimals: 0
    filters:
      - multiply: 0.5 
      - quantile:
          window_size: 100
          send_every: 100
          send_first_at: 3
          quantile: .1

  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"
  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
  - platform: uptime
    name: Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(x);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;

              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") 

              ).c_str();
  - platform: template
    name: "Humidity Correction Value"
    id: hum_correction
    internal: true

# --- Outputs (PWM for Fan and LED) ---
output:
  - platform: ledc
    pin: ${red_led_pin}
    id: red_led_pin
    inverted: true
  - platform: ledc
    pin: ${green_led_pin}
    id: green_led_pin
    inverted: true
  - platform: ledc
    pin: ${blue_led_pin}
    id: blue_led_pin
    inverted: true
  - platform: ledc
    pin: ${fan_pwm_pin}
    id: fan_pwm_output
    frequency: ${fan_pwm_freq}
    inverted: false

light:
  - platform: rgb
    id: rgb_led
    name: "Indicator"
    icon: mdi:auto-mode
    red: red_led_pin
    green: green_led_pin
    blue: blue_led_pin
    effects:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 2s

# --- User Controls (Sliders, etc.) ---
number:
  - platform: template
    id: manual_fan_speed
    name: "Fan Speed Manual"
    icon: mdi:fan
    min_value: 11
    max_value: 75
    step: 1
    initial_value: 50
    unit_of_measurement: "%"
    restore_value: true
    mode: SLIDER
    optimistic: true
    on_value:
      - select.set:
          id: fan_mode_select
          option: "Manual"
  - platform: template
    id: auto_fan_speed
    name: "Fan Speed Auto"
    icon: mdi:fan-speed-1
    min_value: 11
    max_value: 75
    step: 1
    unit_of_measurement: "%"
    initial_value: 75
    restore_value: true
    mode: SLIDER
    optimistic: true
  - platform: template
    id: duty_fan_speed
    name: "Fan Speed Duty"
    icon: mdi:fan-speed-3
    min_value: 9
    max_value: 20
    step: 1
    unit_of_measurement: "%"
    initial_value: 11
    restore_value: true
    mode: SLIDER
    optimistic: true
  - platform: template
    id: burst_fan_speed
    name: "Fan Speed Burst"
    icon: mdi:fan-speed-2
    min_value: 60
    max_value: 75
    step: 1
    unit_of_measurement: "%"
    initial_value: 75 
    restore_value: true
    mode: SLIDER
    optimistic: true
  - platform: template
    id: humidity_threshold_on_raw
    name: "On Threshold %"
    icon: mdi:water-percent-alert
    min_value: 30.0
    max_value: 90.0
    step: 1.0
    unit_of_measurement: '%'
    initial_value: ${humidity_on_default}
    restore_value: True
    mode: SLIDER
    optimistic: True
  - platform: template
    id: humidity_threshold_off_raw
    name: "Off Threshold %"
    icon: mdi:water-percent-alert
    min_value: 30.0
    max_value: 90.0
    step: 1.0
    unit_of_measurement: '%'
    initial_value: ${humidity_off_default}
    restore_value: True
    mode: SLIDER
    optimistic: True
  - platform: template
    name: "Humidity Outside"
    icon: mdi:water-percent
    id: external_hum
    optimistic: true
    min_value: 0
    max_value: 100
    initial_value: 0
    mode: BOX
    step: 1
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(fan_mode_select).state != "Auto";'
            then:
              - logger.log: { format: "External humidity changed, but not in Auto mode. No action taken.", level: DEBUG }
            else:
              - if:
                  condition:
                    lambda: 'return id(external_hum).state >= 70;'
                  then:
                    - logger.log: { format: "High external humidity (>=70%%). Switching to 'Duty' mode.", level: INFO }
                    - select.set:
                        id: fan_mode_select
                        option: "Duty"
                  else:
                    - lambda: |-
                        float correction = 0;
                        if (id(external_hum).state >= 60) {
                          correction = 10;
                        }
                        id(hum_correction).publish_state(correction);
                        id(humidity_threshold_on) = id(humidity_threshold_on_raw).state + correction;
                        id(humidity_threshold_off) = id(humidity_threshold_off_raw).state + correction;
                        ESP_LOGI("main", "External humidity updated. New ON threshold: %.1f, OFF threshold: %.1f", id(humidity_threshold_on), id(humidity_threshold_off));
                    - script.execute: update_fan_state

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    entity_category: "diagnostic"

select:
  - platform: template
    id: fan_mode_select
    name: "Fan Mode"
    options: ["Auto", "Duty", "Manual", "Burst"]
    optimistic: true
    set_action:
      - lambda: id(fan_mode_select).publish_state(x);
      - script.execute: update_fan_state

# --- Scripts and Automations ---
script:
  # Debounced update for humidity-based fan state change
  - id: debounce_humidity_update
    mode: restart
    then:
      - lambda: |-
          static unsigned long last_change = 0;
          unsigned long now = millis();
          if (now - last_change < id(debounce_humidity_interval)) {
            ESP_LOGI("debounce", "Debounce in effect, skipping humidity-triggered state update");
            return;
          }
          last_change = now;
      - script.execute: update_fan_state

  # Main fan state management script
  - id: update_fan_state
    mode: single
    then:
      # Stop all timers before evaluating the state to prevent false triggers
      - script.stop: manual_mode_timer
      - script.stop: burst_mode_timer

      - if:
          condition:
            lambda: 'return id(fan_mode_select).state == "Auto";'
          then:
            # Auto mode: Check humidity and thresholds (debounced)
            - if:
                condition:
                  lambda: |-
                    // Turn ON (or stay ON) at high speed if:
                    // 1. Humidity > ON threshold
                    // OR
                    // 2. Already in high-speed mode and humidity > OFF threshold
                    return id(humidity_sensor).state > id(humidity_threshold_on) ||
                           (id(is_in_high_speed_auto_mode) && (id(humidity_sensor).state > id(humidity_threshold_off)));
                then:
                  # High speed "drying" state
                  - lambda: 'id(is_in_high_speed_auto_mode) = true;'
                  - output.set_level:
                      id: fan_pwm_output
                      level: !lambda "return id(auto_fan_speed).state / 100.0;"
                  - light.turn_on: { id: rgb_led, red: 0.0, green: 0.0, blue: 1.0, brightness: 1.0, effect: "Slow Pulse" }
                else:
                  # Low speed "idle/duty" state
                  - lambda: 'id(is_in_high_speed_auto_mode) = false;'
                  - output.set_level:
                      id: fan_pwm_output
                      level: !lambda "return id(duty_fan_speed).state / 100.0;"
                  - light.turn_on: { id: rgb_led, red: 0.0, green: 1.0, blue: 0.0, brightness: 1.0, effect: "Slow Pulse" }

      - if:
          condition:
            lambda: 'return id(fan_mode_select).state == "Duty";'
          then:
            - lambda: 'id(is_in_high_speed_auto_mode) = false;'
            - output.set_level:
                id: fan_pwm_output
                level: !lambda "return id(duty_fan_speed).state / 100.0;"
            - light.turn_on: { id: rgb_led, red: 0.0, green: 1.0, blue: 0.0, brightness: 1.0, effect: "None" }
      - if:
          condition:
            lambda: 'return id(fan_mode_select).state == "Manual";'
          then:
            - lambda: 'id(is_in_high_speed_auto_mode) = false;'
            - output.set_level:
                id: fan_pwm_output
                level: !lambda "return id(manual_fan_speed).state / 100.0;"
            - light.turn_on: { id: rgb_led, red: 0.0, green: 0.0, blue: 1.0, brightness: 1.0, effect: "None" }
            # Start manual mode timer
            - script.execute: manual_mode_timer
      - if:
          condition:
            lambda: 'return id(fan_mode_select).state == "Burst";'
          then:
            - lambda: 'id(is_in_high_speed_auto_mode) = false;'
            - output.set_level:
                id: fan_pwm_output
                level: !lambda "return id(burst_fan_speed).state / 100.0;"
            - light.turn_on: { id: rgb_led, red: 1.0, green: 0.0, blue: 0.0, brightness: 1.0, effect: "Fast Pulse" }
            # Start burst mode timer
            - script.execute: burst_mode_timer

  # Timer to revert from Manual mode to Auto after specified time
  - id: manual_mode_timer
    mode: restart
    then:
      - delay: ${fan_mode_manual_time}
      - logger.log: { format: "Manual mode timer expired. Reverting to 'Auto' mode.", level: INFO }
      - select.set:
          id: fan_mode_select
          option: "Auto"

  # Timer to revert from Burst mode to Auto after specified time
  - id: burst_mode_timer
    mode: restart
    then:
      - delay: ${fan_mode_burst_time}
      - logger.log: { format: "Burst mode timer expired. Reverting to 'Auto' mode.", level: INFO }
      - select.set:
          id: fan_mode_select
          option: "Auto"
