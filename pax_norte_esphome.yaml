substitutions:
  room_name: "Bath"
  device_name: h-esp-pax-01-fan

esphome:
  name: h-esp-pax-01-fan
  on_boot: 
    priority: 70
    then:
      - select.set:
         id: fan_mode_select
         option: "Auto"

esp32:
  board: esp32dev
  framework:
    type: arduino

web_server:
  port: 80

api:
  encryption:
    key: "YOUR_API_KEY"
ota:
  - platform: esphome
    password: !secret ota_password

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  use_address: h-esp-pax-01-fan.local

  ap:
    ssid: h_esp_pax_01_fan_Hotspot
    password: !secret ssid_password

logger:

preferences:
  flash_write_interval: 15min

captive_portal:

globals:
  - id: humidity_threshold_on
    type: float
    restore_value: yes
    initial_value: '0'
  - id: humidity_threshold_off
    type: float
    restore_value: yes
    initial_value: '0'

# I2C bus for SHT45 sensor
i2c:
  sda: GPIO17
  scl: GPIO04
  frequency: 400kHz 

text_sensor:

  # Send IP Address
  - platform: wifi_info
    ip_address:
      name: IP Address

  # Send Uptime in raw seconds
  - platform: template
    name: Uptime
    id: uptime_human
    icon: mdi:clock-start

sensor:
# SHT45 temperature and humidity sensor
  - platform: sht4x
    temperature:
      name: $room_name temperature
      unit_of_measurement: "Â°C"
      accuracy_decimals: 1
      state_class: "measurement"
    humidity:
      name: $room_name Humidity
      unit_of_measurement: "%"
      accuracy_decimals: 1
      state_class: "measurement"
      id: bathroom_sensor
      on_value:
        then:
          - if:
              condition:
                lambda: 'return id(fan_mode_select).state == "Auto";'
              then:
                - if:
                    condition:
                      lambda: 'return id(bathroom_sensor).state > id(humidity_threshold_on);'
                    then:
                      - lambda: 'id(fan_pwm_output).set_level(id(auto_fan_speed).state / 100.0);'
                      - light.turn_on:
                          id: rgb_led
                          brightness: 1.0
                          red: 0.0
                          green: 0.0
                          blue: 1.0
                          effect: "Slow Pulse"
                - if:
                    condition:
                      lambda: 'return id(bathroom_sensor).state < id(humidity_threshold_off);'
                    then:
                      - lambda: 'id(fan_pwm_output).set_level(id(duty_fan_speed).state / 100.0);'
                      - light.turn_on:
                          id: rgb_led
                          brightness: 1.0
                          red: 0.0
                          green: 1.0
                          blue: 0.0
                          effect: "None"
    update_interval: 30s

  - platform: adc
    pin: GPIO34
    name: $room_name Illuminance
    device_class: illuminance
    unit_of_measurement: lx
    update_interval: 10s
    filters:
      - multiply: 300

# RPM Fan sensor
  - platform: pulse_counter
    pin: 
      number: GPIO16
      mode: INPUT_PULLUP
    unit_of_measurement: 'RPM'
    id: fan_speed
    name: "Fan Speed"
    icon: mdi:engine
    accuracy_decimals: 0
    filters:
      - multiply: 0.5 

# Wi-Fi level sensor
  - platform: wifi_signal
    name: "WiFi Signal dB"
    id: wifi_signal_db
    update_interval: 60s
    entity_category: "diagnostic"

  - platform: copy
    source_id: wifi_signal_db
    name: "WiFi Signal Percent"
    filters:
      - lambda: return min(max(2 * (x + 100.0), 0.0), 100.0);
    unit_of_measurement: "%"
    entity_category: "diagnostic"
    device_class: ""

# Device uptime sensor
  - platform: uptime
    name: Uptime
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + "d " : "") +
                (hours ? to_string(hours) + "h " : "") +
                (minutes ? to_string(minutes) + "m " : "") +
                (to_string(seconds) + "s")
              ).c_str();

# Sensor for humidity correction

  - platform: template
    name: "Humidity correction"
    unit_of_measurement: step
    id: hum_correction


output:
  - platform: ledc
    pin: GPIO18
    id: red_led_pin
    inverted: true
    max_power: 100%
  - platform: ledc
    pin: GPIO19
    id: green_led_pin
    inverted: true
    max_power: 100%
  - platform: ledc
    pin: GPIO21
    id: blue_led_pin
    inverted: true
    max_power: 100%

  - platform: ledc
    pin: GPIO22
    id: fan_pwm_output
    frequency: 25kHz
    inverted: false

# RGB LED Control
light:
  - platform: rgb
    id: rgb_led
    name: "Indicator"
    red: red_led_pin
    green: green_led_pin
    blue: blue_led_pin
    effects:
      - pulse:
      - pulse:
          name: "Fast Pulse"
          transition_length: 0.5s
          update_interval: 0.5s
          min_brightness: 0%
          max_brightness: 100%
      - pulse:
          name: "Slow Pulse"
          transition_length: 500ms
          update_interval: 2s

# Fan Speed settings
number:
  - platform: template
    id: manual_fan_speed
    name: "Fan Speed Manual"
    icon: mdi:fan
    min_value: 11
    max_value: 75
    step: 1
    initial_value: 50
    unit_of_measurement: "%"
    restore_value: true
    mode: SLIDER
    optimistic: true
    on_value:
      - select.set:
          id: fan_mode_select
          option: "Manual"
      - delay: 10min
      - select.set:
          id: fan_mode_select
          option: "Auto"

  - platform: template
    id: auto_fan_speed
    name: "Fan Speed Auto"
    icon: mdi:fan-speed-1
    min_value: 11
    max_value: 75
    step: 1
    unit_of_measurement: "%"
    initial_value: 80
    restore_value: true
    mode: SLIDER
    optimistic: true

  - platform: template
    id: duty_fan_speed
    name: "Fan Speed Duty"
    icon: mdi:fan-speed-3
    min_value: 11
    max_value: 20
    step: 1
    unit_of_measurement: "%"
    initial_value: 11
    restore_value: true
    mode: SLIDER
    optimistic: true

  - platform: template
    id: burst_fan_speed
    name: "Fan Speed Burst"
    icon: mdi:fan-speed-2
    min_value: 60
    max_value: 75
    step: 1
    unit_of_measurement: "%"
    initial_value: 90
    restore_value: true
    mode: SLIDER
    optimistic: true

# Humidity threshold on off
  - platform: template
    id: humidity_threshold_on_raw
    name: "On Threshold %"
    icon: mdi:water-percent-alert
    min_value: 30.0
    max_value: 90.0
    step: 1.0
    unit_of_measurement: '%'
    initial_value: 65.0
    restore_value: True
    mode: SLIDER
    optimistic: True
    disabled_by_default: False
    update_interval: 60s

  - platform: template
    id: humidity_threshold_off_raw
    name: "Off Threshold %"
    icon: mdi:water-percent-alert
    min_value: 30.0
    max_value: 90.0
    step: 1.0
    unit_of_measurement: '%'
    initial_value: 60.0
    restore_value: True
    mode: SLIDER
    optimistic: True
    disabled_by_default: False
    update_interval: 60s

#External humidity sensor thresholds correction if<60 no correction, if 60-70 then +10, if <70 switch on duty mode

  - platform: template
    name: "Humidity Correction"
    id: external_hum
    optimistic: true
    min_value: 0
    max_value: 100
    initial_value: 0
    step: 1
    on_value:
      then:
        - if:
            condition:
              lambda: 'return id(external_hum).state < 60;'
            then:
              - lambda: |-
                  id(hum_correction).publish_state(0);
                  id(humidity_threshold_on) = id(humidity_threshold_on_raw).state + id(hum_correction).state;
                  id(humidity_threshold_off) = id(humidity_threshold_off_raw).state + id(hum_correction).state;
              - select.set:
                  id: fan_mode_select
                  option: "Auto"
        - if:
            condition:
              lambda: 'return (id(external_hum).state >= 60) && (id(external_hum).state < 70);'
            then:
              - lambda: |-
                  id(hum_correction).publish_state(15);
                  id(humidity_threshold_on) = id(humidity_threshold_on_raw).state + id(hum_correction).state;
                  id(humidity_threshold_off) = id(humidity_threshold_off_raw).state + id(hum_correction).state;
              - select.set:
                  id: fan_mode_select
                  option: "Auto"
        - if:
            condition:
              lambda: 'return id(external_hum).state >= 70;'
            then:
              - select.set:
                  id: fan_mode_select
                  option: "Duty"

button:
  - platform: restart
    icon: mdi:power-cycle
    name: "ESP Reboot"
    entity_category: diagnostic

# Selecting the fan mode
select:
  - platform: template
    id: fan_mode_select
    name: "Fan Mode"
    options:
      - "Auto"
      - "Duty"
      - "Manual"
      - "Burst"
    optimistic: true
    set_action:
      - lambda: |-
          id(fan_mode_select).publish_state(x);

          if (x == "Duty") {
            id(fan_pwm_output).set_level(id(duty_fan_speed).state / 100.0);
            auto call = id(rgb_led).turn_on();
            call.set_brightness(1.0);
            call.set_rgb(0.0, 1.0, 0.0);
            call.set_effect("None");
            call.perform();
          } else if (x == "Manual") {
            id(fan_pwm_output).set_level(id(manual_fan_speed).state / 100.0);
            auto call = id(rgb_led).turn_on();
            call.set_brightness(1.0);
            call.set_rgb(0.0, 0.0, 1.0);
            call.set_effect("None");
            call.perform();
          } else if (x == "Burst") {
            id(fan_pwm_output).set_level(id(burst_fan_speed).state / 100.0);
            auto call = id(rgb_led).turn_on();
            call.set_brightness(1.0);
            call.set_rgb(1.0, 0.0, 0.0);
            call.set_effect("Fast Pulse");
            call.perform();
          }else {
          }

